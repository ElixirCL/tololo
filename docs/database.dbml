// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs
/* Base fields
  id text [primary key, note: 'uuidv7']
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
*/

Table roles {
  id text [primary key, note: 'uuidv7']
  name text [not null]
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table permissions {
  id text [primary key, note: 'uuidv7']
  name text [not null]
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table role_permissions {
  id text [primary key, note: 'uuidv7']
  role_id text [not null]
  permission_id text [not null]
}

Ref: role_permissions.role_id > roles.id
Ref: role_permissions.permission_id > permissions.id

// A table for storing user and password
Table users {
  id text [primary key, note: 'uuidv7']
  name text [not null]
  password text [note: 'bcrypt']
  contact_id text
  last_login_at timestamp [not null, default: `now()`]
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table users_roles {
  id text [primary key, note: 'uuidv7']
  user_id text [not null]
  role_id text [not null]
}

Ref: users_roles.user_id > users.id
Ref: users_roles.role_id > roles.id

// A customer is someone that made an order
// Can be associated with an user or not
Table customers {
  id text [primary key, note: 'uuidv7']
  user_id text [null]
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

// Add table for a customer to have many contacts
// and a primary contact

// Add a table for chilean RUT
// Made them compatible to identify the user
// even when the RUT is requested to be deleted
// maybe using a special token?

// Add table to have
Ref: customers.user_id > users.id
Ref: users.contact_id < contacts.id

// Check Apple Docs for proper names for contact fields
// https://developer.apple.com/documentation/contacts/cncontact
Table contacts {
  id text [primary key, note: 'uuidv7']
  type_id text [not null]
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table contacts_types {
  id text [primary key, note: 'uuidv7']
  value text [note: 'person or organization']
  inserted_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Ref: contacts.type_id > contacts_types.id

// A Table to register any activity done
// Useful for trails
// register any insert, update or delete activity
// so we do not need soft deletes in tables, if you want to recover some info
// just check the activity_logs table
Table activity_logs {
  id text [primary key, note: 'uuidv7']
  origin text [not null, note: 'where the event was generated']
  action text [not null, note: 'an identifier of the action or general context']
  content json [not null, note: 'json string with relevant data of the event']
  inserted_at timestamp [not null, default: `now()`]
}
